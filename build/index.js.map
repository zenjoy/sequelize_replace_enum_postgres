{"version":3,"sources":["../src/index.js"],"names":["createEnum","getQueryToCreateEnum","unsetDefaultValueFromEnum","getQueryToRemoveDefaultFromColumn","setColumnTypeToEnum","getQueryToSetEnumType","dropEnum","getQueryToDropEnum","renameEnum","getQueryToRenameEnum","setColumnDefault","getQueryToSetColumnDefault","args","tableName","columnName","defaultValue","newValues","queryInterface","enumName","newEnumName","sequelize","transaction","t","sequelizeOptions","name","values","then","oldEnumName","defaultValueType","query","join"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Since PostgreSQL still does not support remove values from an ENUM,\n * the workaround is to create a new ENUM with the new values and use it\n * to replace the other.\n *\n * @param {Object} args\n * @param {String} args.tableName\n * @param {String} args.columnName\n * @param {String} args.defaultValue\n * @param {Array}  args.newValues\n * @param {Object} args.queryInterface\n * @param {String} args.enumName - Optional.\n *\n * @return {Promise}\n */\nexport default (args) => {\n  const {\n    tableName,\n    columnName,\n    defaultValue,\n    newValues,\n    queryInterface,\n    enumName = `enum_${tableName}_${columnName}`\n  } = args;\n\n  const newEnumName = `${enumName}_new`;\n\n  return queryInterface.sequelize.transaction((t) => {\n    const sequelizeOptions = { transaction: t };\n\n    // Create a copy of the type\n    return createEnum(\n      { queryInterface, name: newEnumName, values: newValues, sequelizeOptions }\n    )\n      // Drop default value (ALTER COLUMN cannot cast default values)\n      .then(() => unsetDefaultValueFromEnum(\n        { queryInterface, tableName, columnName, sequelizeOptions }\n      ))\n      // Change column type to the new ENUM TYPE\n      .then(() => setColumnTypeToEnum({\n        tableName,\n        columnName,\n        enumName: newEnumName,\n        queryInterface,\n        sequelizeOptions\n      }))\n      // Drop old ENUM\n      .then(() => dropEnum({ enumName, sequelizeOptions, queryInterface }))\n      // Rename new ENUM name\n      .then(() => renameEnum({\n        oldEnumName: newEnumName,\n        newEnumName: enumName,\n        queryInterface,\n        sequelizeOptions\n      }))\n      .then(() => setColumnDefault({\n        tableName,\n        columnName,\n        defaultValue,\n        defaultValueType: enumName,\n        queryInterface,\n        sequelizeOptions\n      }));\n  });\n}\n\n/**\n * Create a new ENUM.\n *\n * @param {Object}   args\n * @param {String}   args.name\n * @param {String[]} args.values\n * @param {Object}   args.sequelizeOptions\n * @param {Object}   args.queryInterface\n *\n * @return {Promise}\n */\nexport function createEnum(args) {\n  return args.queryInterface.sequelize.query(\n    getQueryToCreateEnum(args.name, args.values),\n    args.sequelizeOptions\n  );\n}\n\n/**\n * Returns the query to create an Enum.\n *\n * @param {String}   name\n * @param {String[]} values\n *\n * @return {String}\n */\nexport function getQueryToCreateEnum(name, values) {\n  return `CREATE TYPE \"${name}\" AS ENUM ('${values.join('\\', \\'')}')`;\n}\n\n/**\n * Unset default value from ENUM.\n *\n * @param {Object} args\n * @param {String} args.tableName\n * @param {String} args.columnName\n * @param {Object} args.sequelizeOptions\n * @param {Object} args.queryInterface\n *\n * @return {Promise}\n */\nexport function unsetDefaultValueFromEnum(args) {\n  return args.queryInterface.sequelize.query(\n    getQueryToRemoveDefaultFromColumn(args.tableName, args.columnName),\n    args.sequelizeOptions\n  );\n}\n\n/**\n * Get the query to drop default value for a column.\n *\n * @param {String} tableName\n * @param {String} columnName\n *\n * @return {String}\n */\nexport function getQueryToRemoveDefaultFromColumn(tableName, columnName) {\n  return `ALTER TABLE \"${tableName}\" ALTER COLUMN \"${columnName}\" DROP DEFAULT`;\n}\n\n/**\n * Set the column type to an Enum.\n *\n * @param {Object} args\n * @param {String} args.tableName\n * @param {String} args.columnName\n * @param {String} args.enumName\n * @param {Object} args.sequelizeOptions\n *\n * @return {Promise}\n */\nexport function setColumnTypeToEnum(args) {\n  return args.queryInterface.sequelize.query(\n    getQueryToSetEnumType(args.tableName, args.columnName, args.enumName),\n    args.sequelizeOptions\n  );\n}\n\n/**\n * Get the query to set a column type to an Enum.\n *\n * @param {String} tableName\n * @param {String} columnName\n * @param {String} enumName\n *\n * @return {String}\n */\nexport function getQueryToSetEnumType(tableName, columnName, enumName) {\n  return `\n    ALTER TABLE \"${tableName}\"\n      ALTER COLUMN \"${columnName}\"\n        TYPE \"${enumName}\"\n        USING (\"${columnName}\"::text::\"${enumName}\")\n  `;\n}\n\n/**\n * Drop an Enum.\n *\n * @param {Object} args\n * @param {Object} args.queryInterface\n * @param {String} args.enumName\n * @param {Object} args.sequelizeOptions\n *\n * @return {Promise}\n */\nexport function dropEnum(args) {\n  return args.queryInterface.sequelize.query(\n    getQueryToDropEnum(args.enumName),\n    args.sequelizeOptions\n  );\n}\n\n/**\n * Get the query to drop an Enum.\n *\n * @param {String} enumName\n *\n * @return {String}\n */\nexport function getQueryToDropEnum(enumName) {\n  return `DROP TYPE \"${enumName}\"`;\n}\n\n/**\n * Rename an Enum.\n *\n * @param {Object} args\n * @param {Object} args.queryInterface\n * @param {String} args.oldEnumName\n * @param {String} args.newEnumName\n * @param {Object} args.sequelizeOptions\n *\n * @return {Promise}\n */\nexport function renameEnum(args) {\n  return args.queryInterface.sequelize.query(\n    getQueryToRenameEnum(args.oldEnumName, args.newEnumName),\n    args.sequelizeOptions\n  );\n}\n\n/**\n * Get the query to rename an enum.\n *\n * @param {String} oldEnumName\n * @param {String} newEnumName\n *\n * @return {String}\n */\nexport function getQueryToRenameEnum(oldEnumName, newEnumName) {\n  return `ALTER TYPE \"${oldEnumName}\" RENAME TO \"${newEnumName}\"`;\n}\n\n/**\n * Set the default value for a column.\n *\n * @param {Object} args\n * @param {Object} args.queryInterface\n * @param {String} args.tableName\n * @param {String} args.columnName\n * @param {String} args.defaultValue\n * @param {String} args.defaultValueType\n * @param {Object} args.sequelizeOptions\n *\n * @return {Promise}\n */\nexport function setColumnDefault(args) {\n  return args.queryInterface.sequelize.query(\n    getQueryToSetColumnDefault(\n      args.tableName,\n      args.columnName,\n      args.defaultValue,\n      args.defaultValueType\n    ),\n    args.sequelizeOptions\n  );\n}\n\n/**\n * Get the query to set the default value for a column.\n *\n * @param {String} tableName\n * @param {String} columnName\n * @param {String} defaultValue\n * @param {String} defaultValueType\n *\n * @return {String}\n */\nexport function getQueryToSetColumnDefault(tableName, columnName, defaultValue, defaultValueType) {\n  return `\n    ALTER TABLE \"${tableName}\"\n      ALTER COLUMN \"${columnName}\"\n        SET DEFAULT '${defaultValue}'::\"${defaultValueType}\"\n  `;\n}\n"]}